dat.Setosa <- subset(dat, Species=="setosa")
dat.Setosa$Species <-droplevels(dat.Setosa$Species)
summary(dat.Setosa)
plot(dat.Setosa)
plot(dat.Setosa$Sepal.Length,dat.Setosa$Sepal.Width)
plot(dat.Setosa$Sepal.Length,dat.Setosa$Petal.Length)
plot(dat.Setosa$Sepal.Length,dat.Setosa$Petal.Width)
plot(dat.Setosa)
plot(dat.Setosa$Petal.Length,dat.Setosa$Petal.Width)
dat.ver <- subset(dat, Species=="versicolora")
dat.ver$Species <-droplevels(dat.ver$Species)
summary(dat.ver)
plot(dat.ver)
dat.ver <- subset(dat, Species=="versicolor")
dat.ver$Species <-droplevels(dat.ver$Species)
summary(dat.ver)
plot(dat.ver)
plot(dat.ver$Sepal.Length,dat.ver$Sepal.Width)
plot(dat.ver$Sepal.Length,dat.ver$Petal.Length)
plot(dat.ver$Sepal.Length,dat.ver$Petal.Width)
plot(dat.ver$Petal.Length,dat.ver$Petal.Width)
dr = iris %>% group_by( Species) %>% summarise(Avg.Sepal.Ratio = mean(Sepal.Length/Sepal.Length), Avg.Sepal.Ratio = mean(Petal.Length/
Petal.Width ))
library(tidyverse)
geom_point(mapping = aes(x=iris$Sepal.Length,y=iris$Sepal.Width,color=Species)
ggplot(data=iris)+
geom_point(mapping = aes(x=iris$Sepal.Length,y=iris$Sepal.Width,color=Species))
ggplot(data=iris)+
geom_point(mapping = aes(x=iris$Sepal.Length,y=iris$Sepal.Width,color=iris$Species))
ggplot(data=iris)+
geom_point(mapping = aes(x=Sepal.Length,y=Sepal.Width,color=Species))
install.packages("tidyverse")
library(tidyverse)
install.packages("rpart")
library(rpart)
library(mrl)
install.packages("mlr")
library(mrl)
library(mlr)
library(mlr3)
install.packages("mlr3")
install.packages("Fahrmeir")
library(Fahrmeir)
data(credit)
str(credit)
credit
credit[1:4]
credit[1:4,]
levels(credit$Y)
levels(credit$Y)<-c(1,2)
levels(credit$Y)
summary(credit$Y)
class(credit)
class(credit$Y)
class(credit$Cuenta)
unclass(credit$Cuenta)
unclass(credit$y)
unclass(credit$Y)
credit_c$y <-l[unclass(credit$Y)]
l <-c(0,1)
credit_c$y <-l[unclass(credit$Y)]
credit$y <-l[unclass(credit$Y)]
summary(credit$Y)
credit$Y
unclass(credit$Y)
l <-c('0','1')
credit$y <-l[unclass(credit$Y)]
summary(credit$Y)
credit$Y
levels(credit$Y)<-c(0,1)
levels(credit$Y)
summary(credit$Y)
l <-c('0','1)
credit$y <-l[unclass(credit$Y)]
summary(credit$Y)
credit$Y
unclass(credit$Y)
l <-c('0','1')
credit$y <-l[unclass(credit$Y)]
summary(credit$Y)
levels(credit$Cuenta)
levels(credit$Cuenta)<-c('no','good','bad')
levels(credit$Cuenta)
summary(credit$Cuenta)
levels(credit$Ppag)
levels(credit$Ppag)<-c(good','bad')
levels(credit$Y)
summary(credit$Y)
l <-c('0','1')
credit$y <-l[unclass(credit$Y)]
summary(credit$Y)
credit$Y
unclass(credit$Y)
summary(credit$Cuenta)
levels(credit$Ppag)<-c('good','bad')
summary(credit$Ppag)
credit$y <-unclass(credit$Y)
summary(credit$Y)
class(credit$Y)
str(credit)
library(Fahrmeir)
data(credit)
str(credit)
credit[1:4,]
levels(credit$Y)<-c(0,1)
levels(credit$Cuenta)<-c('no','good','bad')
levels(credit$Y)
levels(credit$Ppag)<-c('good','bad')
summary(credit$Y)
summary(credit$Ppag)
credit$y <-unclass(credit$Y)
summary(credit$Y)
unclass(credit$Y)
summary(credit$Cuenta)
str(credit)
library(Fahrmeir)
data(credit)
str(credit)
credit[1:4,]
levels(credit$Y)<-c(0,1)
levels(credit$Cuenta)<-c('no','good','bad')
levels(credit$Y)
levels(credit$Ppag)<-c('good','bad')
summary(credit$Y)
summary(credit$Ppag)
credit$y <-unclass(credit$Y)
summary(credit$Y)
summary(credit$Cuenta)
str(credit)
library(Fahrmeir)
data(credit)
str(credit)
credit[1:4,]
levels(credit$Y)<-c(0,1)
levels(credit$Cuenta)<-c('no','good','bad')
levels(credit$Y)
levels(credit$Ppag)<-c('good','bad')
summary(credit$Y)
summary(credit$Ppag)
credit$Y <-unclass(credit$Y)
summary(credit$Y)
class(credit$Y)
summary(credit$Cuenta)
str(credit)
levels(credit$Y)<-c(1,0)
levels(credit$Cuenta)<-c('no','good','bad')
levels(credit$Y)
levels(credit$Ppag)<-c('good','bad')
summary(credit$Y)
summary(credit$Ppag)
credit$Y <-unclass(credit$Y)
class(credit$Y)
summary(credit$Cuenta)
str(credit)
levels(credit$Y)<-c('0','1')
levels(credit$Cuenta)<-c('no','good','bad')
levels(credit$Y)
levels(credit$Ppag)<-c('good','bad')
summary(credit$Y)
summary(credit$Ppag)
credit$Y <-unclass(credit$Y)
class(credit$Y)
summary(credit$Cuenta)
str(credit)
levels(credit$Y)<-c('1','0')
levels(credit$Cuenta)<-c('no','good','bad')
levels(credit$Y)
levels(credit$Ppag)<-c('good','bad')
summary(credit$Y)
summary(credit$Ppag)
credit$Y <-unclass(credit$Y)
class(credit$Y)
summary(credit$Cuenta)
str(credit)
library(Fahrmeir)
data(credit)
str(credit)
credit[1:4,]
levels(credit$Cuenta)<-c('no','good','bad')
levels(credit$Y)
levels(credit$Ppag)<-c('good','bad')
summary(credit$Y)
summary(credit$Ppag)
credit$Y <-unclass(credit$Y)
class(credit$Y)
summary(credit$Cuenta)
str(credit)
credit_c %>%
attach
credit_c < -data(credit)
credit_c <-data(credit)
str(credit_c)
data(credit)
str(credit)
credit[1:4,]
levels(credit$Cuenta)<-c('no','good','bad')
levels(credit$Y)
levels(credit$Ppag)<-c('good','bad')
summary(credit$Y)
summary(credit$Ppag)
credit$Y <-unclass(credit$Y)
class(credit$Y)
summary(credit$Cuenta)
str(credit)
credit %>%
attach
credit%>%
attach
library(dplyr)
credit%>%
attach
y %>%
table
y %>%
table
Y %>%
table
Y %>%
table %>%
barplot
credit %>%
detach
pairs(credit)
pairs(credit,col = c("red", "cornflowerblue", "purple"))
pairs(credit,labels = names(credit)) = c("red", "cornflowerblue", "purple"),pch = c(8, 18, 1))
pairs(credit,labels = names(credit) = c("red", "cornflowerblue", "purple"),pch = c(8, 18, 1))
pairs(credit,labels = names(credit), c("red", "cornflowerblue", "purple"),pch = c(8, 18, 1))
pairs(credit,labels = names(credit),pch = c(8, 18, 1))
barplot(credit)
barplot(credit)
barplot(credit[1])
barplot(credit[2])
barplot(credit[,2])
barplot(credit[2,])
hist(credit)
hist(credit$Y)
hist(~.credit)
hist(~credit)
hist(credit$Cuenta)
hist(credit$Mes)
hist(credit$Cuenta)
credit$Cuenta <-unclass(credit$Cuenta)
hist(credit$Cuenta)
data(credit)
str(credit)
credit[1:4,]
levels(credit$Cuenta)<-c('no','good','bad')
levels(credit$Y)
levels(credit$Ppag)<-c('good','bad')
summary(credit$Y)
summary(credit$Ppag)
credit$Y <-unclass(credit$Y)
class(credit$Y)
summary(credit$Cuenta)
str(credit)
credit$
credit%>%
attach
Y %>%
table
Y %>%
table %>%
barplot
credit%>%
attach
Y %>%
table
Y %>%
table %>%
barplot
credit %>%
detach
hist(credit$Cuenta)
barplot(credit)
pairs(credit,labels = names(credit),pch = c(8, 18, 1))
col = c("red", "cornflowerblue", "purple")[group],   # Change color by group
pch = c(8, 18, 1)[group],
summary(credit)
glm(formula = y ~ ., family = binomial(link = logit), data = credit)
glm(formula = Y ~ ., family = binomial(link = logit), data = credit)
credit$Y
credit$Y <-unclass(credit$Y)
class(credit$Y)
credit$Y
levels(credit$Y)<-c('0','1')
levels(credit$Ppag)<-c('good','bad')
summary(credit$Y)
summary(credit$Ppag)
credit$Y <-unclass(credit$Y)
class(credit$Y)
credit$Y
levels(credit$Y)<-c('0','1')
credit$Y
library(Fahrmeir)
library(dplyr)
data(credit)
str(credit)
credit[1:4,]
levels(credit$Cuenta)<-c('no','good','bad')
levels(credit$Y)
levels(credit$Y)<-c('0','1')
levels(credit$Ppag)<-c('good','bad')
summary(credit$Y)
credit$Y
glm(formula = Y ~ ., family = binomial(link = logit), data = credit)
summary(glm(formula = Y ~ ., family = binomial(link = logit), data = credit))
library(ISLR)
library(ISLR)
data()
data(Smarket)
names(Smarket)
dim(Smarket)
summary(Smarket)
# Correlation function
cor(Smarket)
cor(Smarket[,-9])
names(Smarket)
# Correlation function
cor(Smarket) # This first command
#gives an error message because the Direction variable is qualitative.
cor(Smarket[,-9])
attach ( Smarket )
plot( Volume )
detach(Smarket)
plot(year, Volume )
attach ( Smarket )
plot(year, Volume )
plot(Year, Volume )
plot( Volume )
detach(Smarket)
glm . fit =glm ( Direction∼Lag1+ Lag2+ Lag3+Lag4+ Lag5+Volume ,
data=Smarket , family = binomial )
glm.fit =glm ( Direction∼Lag1+ Lag2+ Lag3+Lag4+ Lag5+Volume ,
data=Smarket , family = binomial )
summary (glm .fit )
summary (glm.fit )
coef(glm .fit )
coef(glm.fit )
glm.probs = predict (glm.fit ,type =" response ")
glm.fit =glm ( Direction∼Lag1+ Lag2+ Lag3+Lag4+ Lag5+Volume ,
data=Smarket , family = binomial )
summary (glm.fit )
"The smallest p-value here is associated with Lag1. The negative coefficient
for this predictor suggests that if the market had a positive return yesterday,
then it is less likely to go up today. However, at a value of 0.15, the p-value
is still relatively large, and so there is no clear evidence of a real association
between Lag1 and Direction."
coef(glm.fit )
glm.probs = predict (glm.fit ,type =" response ")
glm.probs <- predict (glm.fit ,type =" response ")
glm.probs <- predict (glm.fit ,type ="response")
glm.probs [1:10]
contrasts ( Direction )
contrasts (Direction)
attach ( Smarket )
contrasts (Direction)
library(tidyverse)
gene = read.csv("https://perso.univ-rennes1.fr/valerie.monbet/DATA/data_set_ALL_AML_train.csv",header=TRUE,sep="\t")
ncol(gene)
X = t(gene[,seq(3,ncol(gene),by=2)])
Y = as.factor(c(rep(1,27),rep(2,11))) # class label (2 = AML, 1 = ALL)
Y
# Calculate distances
dists=dist(t(mat))
# Calculate distances
dists=dist(t(leukemia_big))
leukemia_big <- read.csv("http://hastie.su.domains/CASI_files/DATA/leukemia_big.csv")
# calculate MDS
mds=cmdscale(dists)
# Calculate distances
dists=dist(t(leukemia_big))
# calculate MDS
mds=cmdscale(dists)
# plot the patients in the 2D space
plot(mds,pch=19,col=rainbow(5)[kclu$cluster])
# we have to transpore the matrix t()
# so that we calculate distances between patients
kclu=kmeans(x,centers=5)
# plot the patients in the 2D space
plot(mds,pch=19,col=rainbow(5)[kclu$cluster])
# we have to transpore the matrix t()
# so that we calculate distances between patients
kclu=kmeans(x,centers=5)
x<-t(leukemia_big)
# we have to transpore the matrix t()
# so that we calculate distances between patients
kclu=kmeans(x,centers=5)
# Calculate distances
dists=dist(t(leukemia_big))
# calculate MDS
mds=cmdscale(dists)
# plot the patients in the 2D space
plot(mds,pch=19,col=rainbow(5)[kclu$cluster])
## PCA
pcdemo <- prcomp(x)
pc <- pcdemo$x[, 1:2]
plot(pc)
est <- bkde2D(pc, bandwidth = c(0.5, 0.5), gridsize = c(20, 20))
library(TeachingDemos)
library(KernSmooth)
library(MASS)
library(lattice)
library(ggplot2)
library(RColorBrewer)
library(viridis)
library(factoextra)
library(cluster)
library(fpc)
library(NbClust)
pcdemo <- prcomp(x)
pc <- pcdemo$x[, 1:2]
plot(pc)
est <- bkde2D(pc, bandwidth = c(0.5, 0.5), gridsize = c(20, 20))
contour(est$x1, est$x2, est$fhat, main = "Empirical 2D-density ...", col = 4)
pc %>%
as.data.frame -> pc
pc %>%
as.data.frame -> pc
library(tidyverse)
pc %>%
as.data.frame -> pc
p1 <- ggplot(pc, aes(x = PC1, y = PC2)) + stat_density2d(aes(fill = ..density..),
geom = "tile", contour = F)
p2 <- p1 + scale_fill_distiller(palette = "RdGy")
p3 <- p1 + scale_fill_viridis(option = "inferno")
ggpubr::ggarrange(p1, p2, p3, ncol = 3)
parcoord(x)
parcoord(x, col=1:12)
parcoord(t(x), col=1:12)
parallelplot(x)
parcoord(t(x), col=1:5)
persp(est$x1, est$x2, est$fhat, main = "... of the first 2 PC", theta = 0, phi = 30,
col = "lightblue", shade = 0.75, axes = T)
est <- bkde2D(pc, bandwidth = c(0.5, 0.5), gridsize = c(20, 20))
contour(est$x1, est$x2, est$fhat, main = "Empirical 2D-density ...", col = 4)
persp(est$x1, est$x2, est$fhat, main = "... of the first 2 PC", theta = 0, phi = 30,
col = "lightblue", shade = 0.75, axes = T)
pc %>%
as.data.frame -> pc
p1 <- ggplot(pc, aes(x = PC1, y = PC2)) + stat_density2d(aes(fill = ..density..),
geom = "tile", contour = F)
p2 <- p1 + scale_fill_distiller(palette = "RdGy")
p3 <- p1 + scale_fill_viridis(option = "inferno")
ggpubr::ggarrange(p1, p2, p3, ncol = 3)
contour(est$x1, est$x2, est$fhat, main = "Empirical 2D-density ...", col = 4)
est
persp(est$x1, est$x2, est$fhat, main = "... of the first 2 PC", theta = 0, phi = 30,
col = "lightblue", shade = 0.75, axes = T)
pc %>%
as.data.frame -> pc
p1 <- ggplot(pc, aes(x = PC1, y = PC2)) + stat_density2d(aes(fill = ..density..),
geom = "tile", contour = F)
p2 <- p1 + scale_fill_distiller(palette = "RdGy")
p3 <- p1 + scale_fill_viridis(option = "inferno")
ggpubr::ggarrange(p1, p2, p3, ncol = 3)
library(tidyverse)
leukemia_big <- read.csv("http://hastie.su.domains/CASI_files/DATA/leukemia_big.csv")
setwd("D:/University of Trieste/project/Stream_benchemark_and_matrices_transpose")
setwd("D:/University of Trieste/project/Stream_benchemark_and_matrices_transpose")
library(tidyverse)
library(tibble)
largcol<-read.csv("result/large_col.csv", header = FALSE,sep=";")
largcol%>%rename(Size=V1, Time=V2)-> largcol
largcol$Size<- as.numeric(largcol$Size)
largcol$Time<- as.numeric(largcol$Time)
largrow<-read.csv("result/large_row.csv", header = FALSE,sep=";")
largrow%>%rename(Size=V1, Time=V2)-> largrow
largcol<-tibble(largcol)
largcol%>%group_by(Size)%>%
summarize(Walltime = mean(Time, ra.rm=TRUE), sd=sd(Time,na.rm = TRUE)) -> largcol
largrow<-tibble(largrow)
largrow %>%group_by(Size)%>%
summarize(Walltime = mean(Time, ra.rm=TRUE), sd=sd(Time,na.rm = TRUE)) -> largrow
n<-nrow(largcol)
coll = rep("column",n)
largcol<- mutate(largcol, run_by=coll)
result <- rbind(largcol,largrow)
setwd("D:/University of Trieste/project/Stream_benchemark_and_matrices_transpose")
library(tidyverse)
library(tibble)
largcol<-read.csv("result/large_col.csv", header = FALSE,sep=";")
largcol%>%rename(Size=V1, Time=V2)-> largcol
largcol$Size<- as.numeric(largcol$Size)
largcol$Time<- as.numeric(largcol$Time)
largrow<-read.csv("result/large_row.csv", header = FALSE,sep=";")
largrow%>%rename(Size=V1, Time=V2)-> largrow
largrow$Size<- as.numeric(largrow$Size)
largrow$Time<- as.numeric(largrow$Time)
largcol<-tibble(largcol)
largcol%>%group_by(Size)%>%
summarize(Walltime = mean(Time, ra.rm=TRUE), sd=sd(Time,na.rm = TRUE)) -> largcol
largrow<-tibble(largrow)
largrow %>%group_by(Size)%>%
summarize(Walltime = mean(Time, ra.rm=TRUE), sd=sd(Time,na.rm = TRUE)) -> largrow
n<-nrow(largcol)
coll = rep("column",n)
largcol<- mutate(largcol, run_by=coll)
n<-nrow(largrow)
coll = rep("row",n)
largrow<- mutate(largrow, run_by=coll)
view(largcol)
view(largrow)
result <- rbind(largcol,largrow)
result$run_by<-as.factor(result$run_by)
p<-ggplot(result)+
geom_point(mapping = aes(x=Size,y=Walltime, color=run_by))+
geom_smooth(mapping = aes(x=Size,y=Walltime,color=run_by),se=FALSE) +
labs(x="N", y= "Runtime(ms)", title = "Runtime as a function of matrix size NxN")+
theme(plot.title = element_text(hjust = 0.5))+
geom_errorbar(aes(x=Size, ymin=Walltime-sd, ymax=Walltime+sd,color=run_by), width=0.15,show.legend = TRUE)
p
ggsave(p, filename = "plot/large.png")
